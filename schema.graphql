# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AddStopTimeListMutation {
    stopTime: StopTimeListType
}

type CategoryType {
    id: ID!
    machines: [MachineType!]!
    name: String!
}

type CrashElementMutationAdd {
    crash: CrashListType
}

type CrashElementMutationEdit {
    crash: CrashListType
}

type CrashListType {
    comment: String!
    crashListMessages: [MessageType!]!
    dayStart: DayType!
    dayStop: DayType
    deltaTime: Float
    id: ID!
    inWork: Int
    machine: MachineType!
    messages: [MessageType]
    services: [ServiceNameType!]!
    status: String!
    text: String!
    timeStart: Time!
    timeStop: Time
}

type CreateUser {
    user: UserType
}

type DayType {
    crashListInDayStart: [CrashListType!]!
    crashListInMachine(pk: Int): [CrashListType]
    crashlistSet: [CrashListType!]!
    day: Date!
    id: ID!
    stopTimeListInDayStart: [StopTimeListType!]!
    stopTimeListsInMachine(pk: Int): [StopTimeListType]
    stoptimelistSet: [StopTimeListType!]!
    todoInMachine(pk: Int): [ToDoListType]
    todoListInDayStart: [ToDoListType!]!
    todolistSet: [ToDoListType!]!
    totalStopTimeListInMachine(pk: Int): Float
    valuesInDay: [ValueType!]!
    valuesInMachine(pk: Int): [ValueType]
}

type LocationType {
    id: ID!
    machines: [MachineType!]!
    name: String!
}

type MachineType {
    category: CategoryType!
    comment: String!
    crash: Int
    days: [DayType]
    id: ID!
    kmv: Float
    location: LocationType!
    machineCrashLists: [CrashListType!]!
    machineStopTimeList: [StopTimeListType!]!
    machineTodoList: [ToDoListType!]!
    machineValue: [ValueType!]!
    name: String!
}

type MessageType {
    code: MessageCode!
    crashList: CrashListType
    dtCreate: DateTime!
    id: ID!
    postedBy: UserType
    text: String!
}

type Mutation {
    addStopTime(dtStart: DateTime, dtStop: DateTime, machineId: Int, servicesId: [Int], text: String): AddStopTimeListMutation
    crashElementAdd(machineId: Int, servicesId: [Int], text: String): CrashElementMutationAdd
    crashElementEdit(crashId: Int, finish: Boolean, text2: String): CrashElementMutationEdit
    createUser(email: String!, password: String!, username: String!): CreateUser
    refreshToken(token: String): Refresh
    "Obtain JSON Web Token mutation"
    tokenAuth(password: String!, username: String!): ObtainJSONWebToken
    verifyToken(token: String): Verify
}

"Obtain JSON Web Token mutation"
type ObtainJSONWebToken {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    token: String!
}

type Query {
    category: [CategoryType]
    crashElement(pk: Int): CrashListType
    days: [DayType]
    hello: String
    locations: [LocationType]
    machine(pk: Int): MachineType
    machines: [MachineType]
    me: UserType
    statistic(serviceId: Int): StatisticType
    stopTimeList(pk: Int): StopTimeListType
    users: [UserType]
    values: [ValueType]
}

type Refresh {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    token: String!
}

type ServiceNameType {
    crashlistSet: [CrashListType!]!
    id: ID!
    name: String!
    servicesStopTimeList: [StopTimeListType!]!
    servicesTodoList: [ToDoListType!]!
}

type StatisticType {
    crashInWork: Int
}

type StopTimeListType {
    comment: String!
    dayStart: DayType!
    dayStop: DayType
    deltaTime: Float
    id: ID!
    machine: MachineType!
    services: [ServiceNameType!]!
    status: String!
    text: String!
    timeStart: Time!
    timeStop: Time
}

type ToDoListType {
    comment: String!
    dayStart: DayType!
    dayStop: DayType
    id: ID!
    machine: MachineType!
    services: [ServiceNameType!]!
    status: String!
    text: String!
    timeStart: Time!
    timeStop: Time
}

type UserType {
    dateJoined: DateTime!
    email: String!
    firstName: String!
    id: ID!
    "Отметьте, если пользователь должен считаться активным. Уберите эту отметку вместо удаления учётной записи."
    isActive: Boolean!
    "Отметьте, если пользователь может входить в административную часть сайта."
    isStaff: Boolean!
    "Указывает, что пользователь имеет все права без явного их назначения."
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    messageSet: [MessageType!]!
    password: String!
    "Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_."
    username: String!
}

type ValueType {
    day: DayType!
    id: ID!
    kmv: Float
    machine: MachineType!
    speed: Int
    status: String!
    totalLength: Float
    value: String!
}

type Verify {
    payload: GenericScalar!
}

"An enumeration."
enum MessageCode {
    "Finish"
    FNS
    "Message"
    MSG
    "Start"
    STR
}


"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar
